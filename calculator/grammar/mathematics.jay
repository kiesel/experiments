%{
  uses(
    'calc.Addition',
    'calc.Subtraction',
    'calc.Multiplication',
    'calc.Division',
    'calc.Modulo',
    'calc.Power',
    'calc.Value',
    'calc.FunctionFactory',
    'calc.PiFunction',
    'calc.AbsFunction',
    'calc.Negation'
  );
  
%}

%left '+' '-' 
%left '*' '/' '%'
%left '^'
 
%token T_NUMBER 260
%token T_STRING 262 /* used in lexer */
%token T_WORD 263 /* used in lexer */

%%

start: expression { $$= $1; }

expression:
    '(' expression ')' { $$= $2; }
  | expression '+' expression { $$= $yyLex->create(new Addition($1, $3)); }
  | expression '-' expression { $$= $yyLex->create(new Subtraction($1, $3)); }
  | expression '*' expression { $$= $yyLex->create(new Multiplication($1, $3)); }
  | expression '/' expression { $$= $yyLex->create(new Division($1, $3)); }
  | expression '%' expression { $$= $yyLex->create(new Modulo($1, $3)); }
  | expression '^' expression { $$= $yyLex->create(new Power($1, $3)); }
  | atom
;

expressions_opt:
    /* empty */
  | expressions_opt expression { $$[]= $2; }
;

atom:
    '-' atom { $$= $yyLex->create(Negation::createFor($2)); }
  | T_NUMBER { $$= $yyLex->create(new Value($1)); }
  | T_WORD '(' expressions_opt ')' { $$= $yyLex->create(FunctionFactory::create($1, $3)); }
;
%%
