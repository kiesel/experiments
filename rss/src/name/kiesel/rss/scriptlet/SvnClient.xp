import peer.URL;
import lang.Process;
import xml.meta.Unmarshaller;
import xml.parser.StringInputSource;

import native standard.is_numeric;

/**
 * Svn client
 *
 * @purpose  purpose
 */
class SvnClient {
  protected string $repository = NULL;
  
  /**
   * Bind to URL
   *
   */
  public void bind(string $url) {
    $this.repository= new URL($url);
  }
  
  /**
   * Build command line
   *
   */
  public string buildCommand(string $action, [:] $ext= []) {
    $cmd= [$action];
    

    foreach ($k, $v in $ext) {
    
      // Skip "empty" arguments
      if (NULL === $v) continue;
      
      // Handle switches
      if (is_numeric($k)) {
        $cmd[]= '--' ~ $v;
        continue;
      }
      
      $cmd[]= '--' ~ $k ~ '=' ~ $v;
    }
    
    $cmd[]= $this.repository.getURL();
    return $cmd;
  }
  
  /**
   * (Insert method's description here)
   *
   * @param   
   * @return  
   */
  public string queryLogAsString(int $max= NULL) {
    return $this.invokeSvn($this.buildCommand('log', [ 'xml', 'verbose', 'limit' : $max]));
  }
  
  /**
   * (Insert method's description here)
   *
   * @param   
   * @return  
   */
  public function queryLog($max= NULL) {
    $um= new Unmarshaller();
    return $um->unmarshalFrom(
      new StringInputSource($this->queryLogAsString($max)),
      'name.kiesel.rss.svn.SvnLog'
    );
  }
  
  /**
   * (Insert method's description here)
   *
   * @param   
   * @return  
   */
  public function queryDiffForChangeSet($revision) {
    $cmd= $this->buildCommand('diff', array('change' => $revision));
    $out= $this->invokeSvn($cmd);
    
    return $out;
  }
  
  /**
   * (Insert method's description here)
   *
   * @param   
   * @return  
   */
  protected function invokeSvn(array $cmd) {
    $proc= new Process('svn', $cmd);
    $proc->in->close();
    
    $out= '';
    while ($l= $proc->out->readLine()) {
      $out.= $l."\n";
    }
    
    $proc->close();
    return $out;
  }
}
